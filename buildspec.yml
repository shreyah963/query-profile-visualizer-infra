version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_ACCOUNT_ID: "869620365293"
    EKS_CLUSTER_NAME: query-profiler-dashboard
    EKS_KUBECTL_ROLE_ARN: arn:aws:iam::869620365293:role/CodeBuildKubectlRole

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo Installing kubectl...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.28.3/2023-11-14/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin
      - echo Verifying kubectl installation...
      - kubectl version --client
      - echo Installing aws-cli...
      - pip install awscli --upgrade

  pre_build:
    commands:
      - echo Configuring kubectl for EKS...
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - echo Current kubectl context
      - kubectl config current-context
      - echo Validating IMAGE_URI environment variable...
      - echo "Current IMAGE_URI value is $IMAGE_URI"
      - echo "Getting latest image from ECR..."
      - LATEST_TAG=$(aws ecr describe-images --repository-name query-profiler-frontend --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' --output text)
      - echo "Latest tag from ECR is $LATEST_TAG"
      - |
        if [ -n "$IMAGE_URI" ] && [ "$IMAGE_URI" != "null" ]; then
          echo "Using provided IMAGE_URI: $IMAGE_URI"
        elif [ "$LATEST_TAG" != "None" ] && [ -n "$LATEST_TAG" ]; then
          IMAGE_URI="869620365293.dkr.ecr.us-east-1.amazonaws.com/query-profiler-frontend:$LATEST_TAG"
          echo "Using latest ECR image: $IMAGE_URI"
        else
          echo "ERROR: Could not determine image to deploy"
          exit 1
        fi
      - export IMAGE_URI
      - echo "Final IMAGE_URI $IMAGE_URI"

  build:
    commands:
      - echo Deployment started on `date`
      - echo Using image URI $IMAGE_URI
      - echo Applying Kubernetes manifests...
      - kubectl apply -f k8s/namespace.yaml
      - kubectl apply -f k8s/deployment.yaml
      - kubectl apply -f k8s/service.yaml
      - echo Updating deployment with new image...
      - kubectl set image deployment/query-profiler-frontend query-profiler-frontend=$IMAGE_URI -n query-profiler
      - echo Waiting for rollout to complete...
      - kubectl rollout status deployment/query-profiler-frontend -n query-profiler --timeout=300s

  post_build:
    commands:
      - echo Deployment complete